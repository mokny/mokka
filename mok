#!/usr/bin/python3

import os, sys, getopt
import time
import subprocess
import shutil
import signal
import logging
import threading

logging.basicConfig(level=logging.INFO)

abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
os.chdir(dname)

sys.path.insert(0, './lib')


def sighandler(signum, frame):
   removepidfile()
   sys.exit()

signal.signal(signal.SIGINT, sighandler)


import mok_path as p
import mok_install
import mok_vars as v
import mok_ipc as ipc

p.setup(__file__)

if not os.access(v.paths.base, os.W_OK):
   logging.error('MOK requires write permissions in the current folder ('+v.paths.base+')')
   sys.exit()

v.wd = dname
v.venv = False
v.httpserver = False

def writepid():
   f = open(".pid", "w")
   f.write(str(os.getpid()))
   f.close()

def killpid():
   try:
      f = open(".pid", "r")
      os.kill(int(f.read()), signal.SIGKILL)
      removepidfile()
      return True
   except:
      return False
   
def removepidfile():
   try:
      os.remove('.pid')
   except:
      pass
   try:
      os.remove('.ipcport')
   except:
      pass         

def main(argv):
   ishost = False
   options = {}
   opts, args = getopt.getopt(argv,"mwbxhig:vse:r",["web", "background", "run","install","git=","verbose","script","start","stop"])
   for opt, arg in opts:
      if opt == '-h':
         print ('Running the MOK Host')
         print (' mok -i --install      Install all required dependencies')
         print (' mok -r --run          Run in console')
         print (' mok -b --background   Run in background (headless)')
         print (' mok -s --stop         Stop host')
         print ('Launching containers')
         print (' mok -g --git <REPO>   Install a github repository')
         print (' mok -v --verbose      Verbose mode')
         print (' mok -s --script <SCRIPT>     Execute script')
         print (' mok -x Virtual environment')
         print (' mok -r <repository> Repository')
         print (' mok -e <executable> Repository Executable file')
         print (' mok -c Cleanup')
         print (' mok -n <name> name')
         sys.exit()
      elif opt in ("-i", "--install"):
         mok_install.install()
         sys.exit()
      elif opt in ("-b", "--background"):
         if killpid():
            print("MOK is already running. Restarting.")
         if shutil.which('nohup') is not None:
            cmd = "nohup "+sys.executable+" "+v.paths.script + " -r"
            if v.httpserver:
               cmd += ' -w'
            cmd += "  > /dev/null &"
            os.system(cmd)
         else:
            logging.error("nohup is not available, can not run in background. See the docs to learn other methods to run MOK in the background.")
         sys.exit()
      elif opt in ("-s", "--stop"):
         if killpid():
            print("Mok successfully closed.")
         else:
            print("Mok was not running")
         sys.exit()
      elif opt in ("-r", "--run"):
         if killpid():
            print("MOK is already running. Restarting.")
         writepid()
         ishost = True

      elif opt in ("-w", "--web"):
         v.httpserver = True
      elif opt == '-x':
         options['venv'] = True
         v.venv = True
      elif opt == '-e':
         options['executable'] = arg
         v.executable = arg
      elif opt == '-r':
         options['repository'] = arg
         v.repository = arg
      elif opt in ("-v", "--verbose"):
         v.opt_verbose = True
      elif opt in ("-g", "--git"):
         print(arg)
         sys.exit()
   if len(opts) == 0:
      print("No parameters. Use -h")
   else:
      if ishost:
         if v.httpserver:
            import mok_webserver
            print("Starting HTTP Deamon...")
            threading.Thread(target=mok_webserver.run, args=(123123,)).start()

         print("Starting IPC Listener...")
         ipc.listen()
         sys.exit()
      else:
         try:
            ipc.send(options)
         except Exception as error:
            print("An error occured. Run -i to install dependecies.", error)


if __name__ == "__main__":        
    main(sys.argv[1:])
