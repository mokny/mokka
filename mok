#!/usr/bin/python3

import os, sys, getopt
import time
import subprocess
import shutil
import signal
import logging
import threading

logging.basicConfig(level=logging.INFO)

# Change to program path as working directory
abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
os.chdir(dname)

# Insert own lib path
sys.path.insert(0, './lib')

# Handle Ctrl-C Events
def sighandler(signum, frame):
   if v.ishost:
      removesystemfiles()
   else:
      ipc.disconnect()
   sys.exit()

signal.signal(signal.SIGINT, sighandler)

# Import custom libraries
import mok_path as p
import mok_install
import mok_vars as v
import mok_ipc as ipc

# Store all required paths 
p.setup(__file__)

# Check for writing permissions in program dir
if not os.access(v.paths.base, os.W_OK):
   logging.error('MOK requires write permissions in the current folder ('+v.paths.base+')')
   sys.exit()

# Setup basic variables
v.wd = dname
v.venv = False
v.backgroundwrapper = False
v.ishost = False
v.httpserver = False
v.consolemode = False
v.inputrequired = False

def writepid():
   f = open(".pid", "w")
   f.write(str(os.getpid()))
   f.close()

def killpid():
   try:
      f = open(".pid", "r")
      os.kill(int(f.read()), signal.SIGKILL)
      removesystemfiles()
      return True
   except:
      return False

def check_pid():        
   try:
      f = open(".pid", "r")
      os.kill(int(f.read()), 0)
   except OSError:
      return False
   else:
      return True

def removesystemfiles():
   if not v.ishost:
      return
   try:
      os.remove('.pid')
   except:
      pass
   try:
      os.remove('.ipcport')
   except:
      pass         

def in_venv():
    return sys.prefix != sys.base_prefix

def help(wizard):
   if wizard:
      print ('          _   _         _            _        ')
      print ('         /\_\/\_\ _    /\ \         /\_\      ')
      print ('        / / / / //\_\ /  \ \       / / /  _   ')
      print ('       /\ \/ \ \/ / // /\ \ \     / / /  /\_\ ')
      print ('      /  \____\__/ // / /\ \ \   / / /__/ / / ')
      print ('     / /\/________// / /  \ \_\ / /\_____/ /  ')
      print ('    / / /\/_// / // / /   / / // /\_______/   ')
      print ('   / / /    / / // / /   / / // / /\ \ \      ')
      print ('  / / /    / / // / /___/ / // / /  \ \ \     ')
      print ('  \/_/    / / // / /____\/ // / /    \ \ \    ')
      print ('          \/_/ \/_________/ \/_/      \_\_\   ')
      print (' ')     
      print ('Wizard Mode. For advanced options press N and use mok -h for help.')     
      print (' ')     
                                          
      if check_pid():
         a = input(">> MOK host is already running. Stop? [Y/n] ")
         if a.lower() == 'y' or a.lower() == '':
            killpid()
         else:
            print('Aborting.')
            sys.exit()

      a = input(">> Do you want to run the host? [Y/n] ")
      if a.lower() == 'y' or a.lower() == '':
         killpid()
         v.ishost = True
         a = input(">> Headless Background mode? [Y/n] ")
         if a.lower() == 'y' or a.lower() == '':
            v.backgroundwrapper = True
         a = input(">> Enable the webserver? [Y/n] ")
         if a.lower() == 'y' or a.lower() == '':
            v.httpserver = True
         print('Starting the MOK host...')
      else:
         print('Aborting.')
         sys.exit()
   else:
      print ('Running the MOK Host')
      print (' mok -i --install      Install all required dependencies')
      print (' mok -r --run          Run in console')
      print (' mok -b --background   Run in background (headless)')
      print (' mok -s --stop         Stop host')
      print ('Launching containers')
      print (' mok -g --git <REPO>   Install a github repository')
      print (' mok -v --verbose      Verbose mode')
      print (' mok -s --script <SCRIPT>     Execute script')
      print (' mok -x Virtual environment')
      print (' mok -r <repository> Repository')
      print (' mok -e <executable> Repository Executable file')
      print (' mok -c Cleanup')
      print (' mok -n <name> name')      
      print (' mok -j --join <process> Join')      
      sys.exit()


def main(argv):

   options = {}
   options['method'] = ''

   opts, args = getopt.getopt(argv,"m:wbxhig:vse:rj:",["status" "join", "web", "background", "run","install","git=","verbose","script","start","stop"])
   for opt, arg in opts:
      if opt == '-h':
         help(False)

      elif opt in ("-i", "--install"):
         mok_install.install()
         sys.exit()

      elif opt in ("-w", "--web"):
         v.httpserver = True

      elif opt in ("-b", "--background"):
         v.backgroundwrapper = True

      elif opt in ("-s", "--stop"):
         if killpid():
            print("Mok successfully closed.")
         else:
            print("Mok was not running")
         sys.exit()

      elif opt in ("-r", "--run"):
         if killpid():
            print("MOK is already running. Restarting.")
         writepid()
         v.ishost = True

      elif opt == '-m':
         v.consolemode = True
         options['method'] = arg

      elif opt == '-x':
         options['method'] = "status"
      elif opt == '-x':
         options['venv'] = True
         v.venv = True
      elif opt == '-e':
         options['method'] = 'inputtest'
         v.executable = arg
      elif opt == '-r':
         options['repository'] = arg
         v.repository = arg
      elif opt in ("-v", "--verbose"):
         v.opt_verbose = True
      elif opt in ("-j", "--join"):
         v.consolemode = True
      elif opt in ("-g", "--git"):
         print(arg)
         sys.exit()
   if len(opts) == 0:
      help(True)


   # Run mok with same parameters with nohup
   if v.backgroundwrapper:
      if killpid():
         print("MOK is already running. Restarting.")
      if shutil.which('nohup') is not None:
         cmd = "nohup "+sys.executable+" "+v.paths.script + " -r"
         if v.httpserver:
            cmd += ' -w'
         cmd += "  > /dev/null &"
         os.system(cmd)
      else:
         logging.error("nohup is not available, can not run in background. See the docs to learn other methods to run MOK in the background.")
      sys.exit()

   # Run host process that receives IPC data
   elif v.ishost:
      if v.httpserver:
         import mok_webserver
         print("Starting HTTP Deamon...")
         threading.Thread(target=mok_webserver.run, args=(8080,)).start()

      print("Starting IPC Listener...")
      ipc.listen()
      sys.exit()
   
   # Run client process that sends IPC data
   else:
      try:
         ipc.connect()
         ipc.persistentsend(options)
         if v.consolemode:
            while True:
               if v.inputrequired:
                  v.inputrequired = False
                  msg = input("> ")
                  if msg == "c":
                     break
                  ipc.persistentsend(msg)
               else:
                  time.sleep(0.1)
         ipc.disconnect()

         #import mok_venv
         #mok_venv.create('test.py')
      except Exception as error:
         print("An error occured. Run -i to install dependecies.", error)


if __name__ == "__main__":        
    main(sys.argv[1:])
